{"ast":null,"code":"var _jsxFileName = \"/home/marcos/Desktop/CursoReact/Proyectos/MERNTask/Cliente/src/context/proyectos/proyectoState.js\";\n//aqui definimos todos los state que vamos a hacer correr por el proyecto junto con las\n//diferentes funciones\nimport React, { useReducer } from \"react\";\nimport proyectoReducer from \"./proyectoReducer\"; //importamos el context que creamos\n\nimport ProyectoContext from \"./proyectoContext\";\nimport clienteAxios from \"../../config/axios\";\nimport { FORMULARIO_PROYECTO, OBTENER_PROYECTO, AGREGAR_PROYECTO, ERROR_FORMULARIO, PROYECTO_ACTUAL, ELIMINAR_PROYECTO } from \"../../type/index\"; //aqui definimos el state inicial junto con todos los props\n\nconst ProyectoState = props => {\n  const initialState = {\n    proyetos: [],\n    formulario: false,\n    error: false,\n    proyecto: null\n  }; // Dispach para ejecutar las acciones.\n\n  const [state, dispatch] = useReducer(proyectoReducer, initialState); //serie de funciones para el CRUD\n  //*funcion que cambia el estado del formulario\n\n  const mostrarFormulario = () => {\n    dispatch({\n      type: FORMULARIO_PROYECTO\n    });\n  };\n\n  const obtenerProyectos = async proyectos => {\n    try {\n      const respuesta = await clienteAxios.get(\"api/proyectos\");\n      dispatch({\n        type: OBTENER_PROYECTO,\n        payload: respuesta.data.proyectos\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const agregarProyecto = async proyecto => {\n    try {\n      const respuesta = await clienteAxios.post(\"/api/proyectos\", proyecto);\n      console.log(respuesta); //insertar proyecto en el state\n\n      dispatch({\n        type: AGREGAR_PROYECTO,\n        payload: respuesta.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const mostrarError = () => {\n    dispatch({\n      type: ERROR_FORMULARIO\n    });\n  };\n\n  const proyectoActual = proyectoId => {\n    dispatch({\n      type: PROYECTO_ACTUAL,\n      payload: proyectoId\n    });\n  };\n\n  const eliminarProyecto = async proyectoId => {\n    try {\n      await clienteAxios.delete(`api/proyectos/${proyectoId}`);\n      dispatch({\n        type: ELIMINAR_PROYECTO,\n        payload: proyectoId\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }; //en el return ponemos lo que seria el componente principal que vamos a estar importando\n  //durante el proyecto\n\n\n  return /*#__PURE__*/React.createElement(ProyectoContext.Provider, {\n    //pasamos un value que seria el valor inicial del state\n    value: {\n      proyectos: state.proyectos,\n      formulario: state.formulario,\n      error: state.error,\n      proyecto: state.proyecto,\n      mostrarFormulario,\n      obtenerProyectos,\n      agregarProyecto,\n      mostrarError,\n      proyectoActual,\n      eliminarProyecto\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default ProyectoState;","map":{"version":3,"sources":["/home/marcos/Desktop/CursoReact/Proyectos/MERNTask/Cliente/src/context/proyectos/proyectoState.js"],"names":["React","useReducer","proyectoReducer","ProyectoContext","clienteAxios","FORMULARIO_PROYECTO","OBTENER_PROYECTO","AGREGAR_PROYECTO","ERROR_FORMULARIO","PROYECTO_ACTUAL","ELIMINAR_PROYECTO","ProyectoState","props","initialState","proyetos","formulario","error","proyecto","state","dispatch","mostrarFormulario","type","obtenerProyectos","proyectos","respuesta","get","payload","data","console","log","agregarProyecto","post","mostrarError","proyectoActual","proyectoId","eliminarProyecto","delete","children"],"mappings":"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","sourcesContent":["//aqui definimos todos los state que vamos a hacer correr por el proyecto junto con las\n//diferentes funciones\n\nimport React, { useReducer } from \"react\";\nimport proyectoReducer from \"./proyectoReducer\";\n//importamos el context que creamos\nimport ProyectoContext from \"./proyectoContext\";\nimport clienteAxios from \"../../config/axios\";\n\nimport {\n    FORMULARIO_PROYECTO,\n    OBTENER_PROYECTO,\n    AGREGAR_PROYECTO,\n    ERROR_FORMULARIO,\n    PROYECTO_ACTUAL,\n    ELIMINAR_PROYECTO,\n} from \"../../type/index\";\n\n//aqui definimos el state inicial junto con todos los props\nconst ProyectoState = (props) => {\n    const initialState = {\n        proyetos: [],\n\n        formulario: false,\n        error: false,\n        proyecto: null,\n    };\n\n    // Dispach para ejecutar las acciones.\n    const [state, dispatch] = useReducer(proyectoReducer, initialState);\n\n    //serie de funciones para el CRUD\n    //*funcion que cambia el estado del formulario\n    const mostrarFormulario = () => {\n        dispatch({\n            type: FORMULARIO_PROYECTO,\n        });\n    };\n\n    const obtenerProyectos = async (proyectos) => {\n        try {\n            const respuesta = await clienteAxios.get(\"api/proyectos\");\n\n            dispatch({\n                type: OBTENER_PROYECTO,\n                payload: respuesta.data.proyectos,\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const agregarProyecto = async (proyecto) => {\n        try {\n            const respuesta = await clienteAxios.post(\n                \"/api/proyectos\",\n                proyecto\n            );\n            console.log(respuesta);\n\n            //insertar proyecto en el state\n            dispatch({\n                type: AGREGAR_PROYECTO,\n                payload: respuesta.data,\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n    const mostrarError = () => {\n        dispatch({\n            type: ERROR_FORMULARIO,\n        });\n    };\n\n    const proyectoActual = (proyectoId) => {\n        dispatch({\n            type: PROYECTO_ACTUAL,\n            payload: proyectoId,\n        });\n    };\n\n    const eliminarProyecto = async (proyectoId) => {\n        try {\n            await clienteAxios.delete(`api/proyectos/${proyectoId}`);\n\n            dispatch({\n                type: ELIMINAR_PROYECTO,\n                payload: proyectoId,\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n    //en el return ponemos lo que seria el componente principal que vamos a estar importando\n    //durante el proyecto\n    return (\n        <ProyectoContext.Provider\n            //pasamos un value que seria el valor inicial del state\n            value={{\n                proyectos: state.proyectos,\n                formulario: state.formulario,\n                error: state.error,\n                proyecto: state.proyecto,\n\n                mostrarFormulario,\n                obtenerProyectos,\n                agregarProyecto,\n                mostrarError,\n                proyectoActual,\n                eliminarProyecto,\n            }}\n        >\n            {/* esta linea dice que va a estar pasando todo el state dentro del sus hijos */}\n            {props.children}\n        </ProyectoContext.Provider>\n    );\n};\n\nexport default ProyectoState;\n"]},"metadata":{},"sourceType":"module"}